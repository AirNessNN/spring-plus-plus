package com.an.springplusplus.core.datasource.wrapper;

import com.an.springplusplus.core.config.DataSourceConfiguration;
import lombok.extern.slf4j.Slf4j;

import javax.sql.DataSource;
import java.io.Serializable;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * @author Airness
 * @email huhaowei16@hotmail.com
 * @date 2020/6/24 1:26 上午
 * @description1
 */
@Slf4j
public class SqlWrapper<E> extends ReflectEntityWrapper<E> {

    protected final static String SELECT = " SELECT ";
    protected final static String FROM = " FROM ";
    protected final static String WHERE = " WHERE ";
    protected final static String GROUP_BY = " GROUP BY ";
    protected final static String ORDER_BY = " ORDER BY ";
    protected final static String INSERT = " INSERT ";
    protected final static String UPDATE = " UPDATE ";
    protected final static String DELETE = " DELETE ";


    protected final static String INTO = " INTO ";
    protected final static String VALUES = " VALUES ";
    protected final static String SET = " SET ";
    protected final static String AND = " AND ";
    protected final static String LIKE = " LIKE ";
    protected final static String NOT = " NOT ";
    protected final static String OR = " OR ";
    protected final static String IN = " IN ";
    protected final static String DESC = " DESC ";
    protected final static String ASC = " ASC ";

    protected final static String COMMA = " , ";
    protected final static String SPACE = " ";
    protected final static String EQUAL = " = ";
    protected final static String PARAM = " ? ";
    protected final static String LEFT_BRACKETS = " ( ";
    protected final static String RIGHT_BRACKETS = " ) ";


    protected final DataSource dataSource;

    protected final StringBuilder sql;

    //数据SQL标记
    protected boolean whereInitialized = false;
    protected boolean appendedCondition = false;

    protected final List<Serializable> paramValues;

    /**
     * 准备标记
     */
    protected boolean isPrepared = false;

    public SqlWrapper(Class<E> tClass) {
        super(tClass);
        dataSource = DataSourceConfiguration.getDataSource();
        sql = new StringBuilder();
        paramValues = new ArrayList<>();
    }

    public SqlWrapper(Class<E> tClass, boolean isUnderscoreToCamelCase) {
        super(tClass, isUnderscoreToCamelCase);
        dataSource = DataSourceConfiguration.getDataSource();
        sql = new StringBuilder();
        paramValues = new ArrayList<>();
    }


    /**
     * 申请连接
     *
     * @return
     */
    protected Connection getConnection() {
        try {
            return dataSource.getConnection();
        } catch (SQLException e) {
            throw new RuntimeException("无法获取数据连接", e);
        }
    }

    protected void initSql(){
        sql.delete(0,sql.length());
        paramValues.clear();
    }

    protected ResultSet select(Connection con) {
        try {
            PreparedStatement statement = con.prepareStatement(sql.toString());
            log.debug("编译SQL语句：{}", statement.toString());
            //填充值
            StringBuilder logString = new StringBuilder();
            for (int i = 1; i <= paramValues.size(); i++) {
                Object v = paramValues.get(i - 1);
                statement.setString(i, v.toString());
                logString.append(String.format("[%s:%s]", v.getClass().getTypeName(), v.toString()));
            }
            log.debug("SQL参数：{}", logString.toString());
            return statement.executeQuery();
        } catch (SQLException e) {
            throw new RuntimeException("无法创建statement", e);
        }
    }


    protected PreparedStatement exec(Connection con,int autoGeneratedKeys){
        try {
            PreparedStatement statement = con.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);
            log.debug("编译Insert SQL语句：{}", statement.toString());
            //填充值
            StringBuilder logString = new StringBuilder();
            for (int i = 1; i <= paramValues.size(); i++) {
                Object v = paramValues.get(i - 1);
                statement.setString(i, v == null ? null : v.toString());
                logString.append(String.format("[%s:%s]", v == null ? "" : v.getClass().getTypeName(), v == null ? null : v.toString()));
            }
            log.debug("Insert SQL参数：{}", logString.toString());
            return statement;
        } catch (SQLException e) {
            throw new RuntimeException("无法创建statement", e);
        }
    }

    /**
     * 插入
     * @return
     */
    protected PreparedStatement insert(Connection con) {
        return exec(con,Statement.RETURN_GENERATED_KEYS);
    }

    /**
     * 返回
     * @param con
     * @return
     */
    protected PreparedStatement update(Connection con){
        return exec(con,Statement.NO_GENERATED_KEYS);
    }

    /**
     * 追加AND 条件
     */
    protected void appendCondition(String conditionStr) {
        if (appendedCondition) {
            sql.append(SPACE).append(conditionStr).append(SPACE);
            return;
        }
        appendedCondition = true;
    }

    /**
     * 初始化Where
     */
    protected void appendWhere() {
        if (!whereInitialized) {
            sql.append(WHERE);
            whereInitialized = true;
        }
    }
}
